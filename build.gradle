import com.r3.testing.DistributeTestsBy
//import com.r3.testing.InfrastructureProfile
import com.r3.testing.ParallelTestGroup
import com.r3.testing.PodLogLevel
//import org.yaml.snakeyaml.Yaml

plugins {
    id 'com.r3.testing.distributed-testing' apply false
    id 'com.r3.testing.image-building' apply false
    id 'java'
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_jupiter_version"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_jupiter_version"
    testImplementation group: 'org.assertj', name: 'assertj-core', version: assertj_version
}

//ext {
//    generalPurpose = new Yaml().loadAs(new URL("https://raw.githubusercontent.com/corda/infrastructure-profiles/master/gradle-distributed-testing-plugin-profiles/generalPurpose.yml").newInputStream(), InfrastructureProfile.class)
//}

tasks.register('allParallelUnitTest', ParallelTestGroup) {
    podLogLevel PodLogLevel.INFO
    testGroups "test"
    numberOfShards 2
    streamOutput true
    coresPerFork 3
    memoryInGbPerFork 12
    distribute DistributeTestsBy.CLASS
    nodeTaints "small"
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()

    // Prevent the project from creating temporary files outside of the build directory.
    systemProperty 'java.io.tmpdir', buildDir.absolutePath
    systemProperty 'user.timezone', 'UTC'
}

tasks.register('integrationTestClasses') {
    doFirst {
        logger.lifecycle("placeholder for integration test compilation to allow plugin testing")
    }
}

wrapper {
    gradleVersion = '5.6.4'
    distributionType = Wrapper.DistributionType.ALL
}

apply plugin: 'com.r3.testing.distributed-testing'
